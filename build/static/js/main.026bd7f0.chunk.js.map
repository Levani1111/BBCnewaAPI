{"version":3,"sources":["components/News/NewSingle.js","components/News/News.js","components/App.js","serviceWorker.js","index.js"],"names":["NewSingle","item","className","src","urlToImage","alt","title","href","url","target","News","props","state","news","fetch","then","response","json","data","setState","articles","catch","error","console","log","this","map","key","renderItems","Component","App","news1","type","query","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0NAmBeA,EAjBG,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,OACd,yBAAKC,UAAU,UACV,yBAAKA,UAAU,QACX,yBAAKA,UAAU,cACd,yBAAKC,IAAKF,EAAKG,WAAYC,IAAKJ,EAAKK,SAGtC,yBAAKJ,UAAU,gBACX,2BAAID,EAAKK,QAEb,yBAAKJ,UAAU,eACX,uBAAGK,KAAMN,EAAKO,IAAKC,OAAO,UAA1B,oBC+BFC,E,kDAxCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACAC,MAAQ,CACVC,KAAM,IAHK,E,gEAME,IAAD,OAKlBC,MAFF,iGAGIC,MAAK,SAACC,GACH,OAAOA,EAASC,UAGpBF,MAAK,SAACG,GACH,EAAKC,SAAS,CACVN,KAAMK,EAAKE,cAGlBC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,Q,oCAI5B,OAAOG,KAAKb,MAAMC,KAAKa,KAAI,SAACzB,GAAD,OACvB,kBAAC,EAAD,CAAW0B,IAAK1B,EAAKO,IAAKP,KAAMA,S,+BAMpC,OACI,yBAAKC,UAAU,OACVuB,KAAKG,mB,GAnCHC,aC+BJC,G,wDA5Bb,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXmB,MAAO,CACLC,KAAM,gBACNC,MAAO,oBALM,E,qDAcnB,OACE,yBAAK/B,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,YACW,4CAGb,kBAAC,EAAD,CAAMW,KAAMY,KAAKb,MAAMmB,a,GAtBXF,cCOEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd3B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM2B,a","file":"static/js/main.026bd7f0.chunk.js","sourcesContent":["import React from 'react';\n\nconst NewSingle = ({item}) => (\n    <div className=\"col s4\">\n         <div className=\"card\">\n             <div className=\"card-image\">\n              <img src={item.urlToImage} alt={item.title}/>\n{/* <span className=\"card-title\">{item.source.name} </span> */}\n             </div>\n             <div className=\"card-content\">\n                 <p>{item.title}</p>\n             </div>\n             <div className=\"card-action\">\n                 <a href={item.url} target=\"_blank\">Full article</a>\n             </div>\n         </div>\n    </div>\n);\n\nexport default NewSingle;","import React, { Component } from 'react';\nimport NewSingle from './NewSingle';\n\nclass News extends Component {\n    constructor(props) {\n        super(props);\n         this.state = {\n            news: [],\n        };\n    }\n    componentDidMount() {\n    const url = \n  \n    'https://newsapi.org/v2/top-headlines?sources=bbc-news&apiKey=ed71b36e32e541b6af7691438d3b68d8';\n    \n      fetch(url)\n       .then((response) => {\n           return response.json();\n      \n      })\n      .then((data) => {\n          this.setState({\n              news: data.articles\n          })\n      })\n      .catch((error) => console.log(error));\n    }\n\n    renderItems() {\n        return this.state.news.map((item) => (\n            <NewSingle key={item.url} item={item} />\n        ));\n    }\n\n\n    render() {\n        return (\n            <div className=\"row\">\n                {this.renderItems()}\n            </div>\n        );\n    }\n}\n\nexport default News;","import React, { Component } from 'react';\nimport News from './News/News';\n\nimport './App.css';\n\nclass App extends Component  {\n  constructor(props) {\n    super(props);\n    this.state = {\n      news1: {\n        type: \"top-headlines\",\n        query: \"surces=bbc-news\",\n      },\n      // news2: {\n      //   type: \"everything\",\n      //   query: \"domains=wsj.com,nytimes.com\"\n      // },\n    };\n  }\n  render() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">\n          BBC News <span>Articles</span>\n        </h1>\n      </header>\n      <News news={this.state.news1} />\n      {/* <News news={this.state.news2} /> */}\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}